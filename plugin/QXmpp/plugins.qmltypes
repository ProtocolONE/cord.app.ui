import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump.exe -nonrelocatable QXmpp 1.0 ./plugin'

Module {
    dependencies: []
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component { name: "QXmppClientExtension"; prototype: "QXmppLoggable" }
    Component {
        name: "QXmppLastActivityManager"
        prototype: "QXmppClientExtension"
        Signal {
            name: "lastActivityReceived"
            Parameter { type: "QXmppLastActivityIq" }
        }
    }
    Component {
        name: "QXmppLoggable"
        prototype: "QObject"
        Signal {
            name: "setGauge"
            Parameter { name: "gauge"; type: "string" }
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "logMessage"
            Parameter { name: "type"; type: "QXmppLogger::MessageType" }
            Parameter { name: "msg"; type: "string" }
        }
        Signal {
            name: "updateCounter"
            Parameter { name: "counter"; type: "string" }
            Parameter { name: "amount"; type: "qlonglong" }
        }
        Signal {
            name: "updateCounter"
            Parameter { name: "counter"; type: "string" }
        }
    }
    Component {
        name: "QXmppLogger"
        prototype: "QObject"
        exports: ["QXmpp/QXmppLogger 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LoggingType"
            values: {
                "NoLogging": 0,
                "FileLogging": 1,
                "StdoutLogging": 2,
                "SignalLogging": 4
            }
        }
        Enum {
            name: "MessageType"
            values: {
                "NoMessage": 0,
                "DebugMessage": 1,
                "InformationMessage": 2,
                "WarningMessage": 4,
                "ReceivedMessage": 8,
                "SentMessage": 16,
                "AnyMessage": 31
            }
        }
        Enum {
            name: "MessageTypes"
            values: {
                "NoMessage": 0,
                "DebugMessage": 1,
                "InformationMessage": 2,
                "WarningMessage": 4,
                "ReceivedMessage": 8,
                "SentMessage": 16,
                "AnyMessage": 31
            }
        }
        Property { name: "logFilePath"; type: "string" }
        Property { name: "loggingType"; type: "LoggingType" }
        Property { name: "messageTypes"; type: "MessageTypes" }
        Signal {
            name: "message"
            Parameter { name: "type"; type: "QXmppLogger::MessageType" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setGauge"
            Parameter { name: "gauge"; type: "string" }
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "updateCounter"
            Parameter { name: "counter"; type: "string" }
            Parameter { name: "amount"; type: "qlonglong" }
        }
        Method {
            name: "log"
            Parameter { name: "type"; type: "QXmppLogger::MessageType" }
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "reopen" }
    }
    Component {
        name: "QXmppVCardManager"
        prototype: "QXmppClientExtension"
        Signal {
            name: "vCardReceived"
            Parameter { type: "QXmppVCardIq" }
        }
        Signal { name: "clientVCardReceived" }
    }
    Component {
        name: "QmlQXmppArchiveManager"
        prototype: "QObject"
        exports: ["QXmpp/QXmppArchiveManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlQXmppBookmarkManager"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppBookmarkManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "received"
            Parameter { name: "bookmarks"; type: "QVariantMap" }
        }
        Method {
            name: "setBookmarks"
            Parameter { name: "bookmarks"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QmlQXmppClient"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QXmpp/QXmppClient 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StatusType"
            values: {
                "Online": 0,
                "Away": 1,
                "XA": 2,
                "DND": 3,
                "Chat": 4,
                "Invisible": 5
            }
        }
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "SocketError": 1,
                "KeepAliveError": 2,
                "XmppStreamError": 3
            }
        }
        Property {
            name: "configuration"
            type: "QmlQXmppConfiguration"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "archiveManager"
            type: "QmlQXmppArchiveManager"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "rosterManager"
            type: "QmlQXmppRosterManager"
            isReadonly: true
            isPointer: true
        }
        Property { name: "vcardManager"; type: "QmlQXmppVCardManager"; isReadonly: true; isPointer: true }
        Property {
            name: "lastActivityManager"
            type: "QmlQXmppLastActivityManager"
            isReadonly: true
            isPointer: true
        }
        Property { name: "pepManager"; type: "QmlQXmppPEPManager"; isReadonly: true; isPointer: true }
        Property { name: "mucManager"; type: "QmlQXmppMucManager"; isReadonly: true; isPointer: true }
        Property {
            name: "discoveryManager"
            type: "QmlQXmppDiscoveryManager"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "bookmarkManager"
            type: "QmlQXmppBookmarkManager"
            isReadonly: true
            isPointer: true
        }
        Property { name: "logger"; type: "QmlQXmppLogger"; isReadonly: true; isPointer: true }
        Property { name: "clientStatusType"; type: "StatusType"; isReadonly: true }
        Property { name: "clientStatusText"; type: "string"; isReadonly: true }
        Signal { name: "connected" }
        Signal { name: "disconnected" }
        Signal {
            name: "error"
            Parameter { name: "code"; type: "int" }
        }
        Signal {
            name: "carbonMessageReceived"
            Parameter { name: "message"; type: "QmlQXmppMessage"; isPointer: true }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QmlQXmppMessage"; isPointer: true }
        }
        Signal {
            name: "presenceReceived"
            Parameter { name: "presence"; type: "QmlQXmppPresence"; isPointer: true }
        }
        Signal {
            name: "streamManagementResumed"
            Parameter { name: "resumed"; type: "bool" }
        }
        Method { name: "connectUsingConfiguration" }
        Method {
            name: "connectToServer"
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "connectToServer"
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "password"; type: "string" }
        }
        Method { name: "disconnectFromServer" }
        Method {
            name: "sendMessage"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "map"; type: "QVariantMap" }
        }
        Method {
            name: "setClientPresence"
            Parameter { name: "map"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QmlQXmppConfiguration"
        prototype: "QObject"
        exports: ["QXmpp/QXmppConfiguration 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "domain"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "user"; type: "string" }
        Property { name: "password"; type: "string" }
        Property { name: "resource"; type: "string" }
        Property { name: "jid"; type: "string" }
        Property { name: "autoAcceptSubscriptions"; type: "bool" }
        Property { name: "autoReconnectionEnabled"; type: "bool" }
        Property { name: "keepAliveInterval"; type: "int" }
        Property { name: "keepAliveTimeout"; type: "int" }
        Property { name: "streamManagementMode"; type: "int" }
    }
    Component {
        name: "QmlQXmppDiscovery"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppDiscovery 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "id"; type: "string"; isReadonly: true }
        Property { name: "features"; type: "QStringList"; isReadonly: true }
        Property { name: "identities"; type: "QVariantList"; isReadonly: true }
        Property { name: "items"; type: "QVariantList"; isReadonly: true }
        Property { name: "queryNode"; type: "string"; isReadonly: true }
        Property { name: "queryType"; type: "string"; isReadonly: true }
        Property { name: "form"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "QmlQXmppDiscoveryManager"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppDiscoveryManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "infoReceived"
            Parameter { name: "info"; type: "QmlQXmppDiscovery"; isPointer: true }
        }
        Signal {
            name: "itemsReceived"
            Parameter { name: "items"; type: "QmlQXmppDiscovery"; isPointer: true }
        }
        Method {
            name: "requestInfo"
            type: "string"
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "node"; type: "string" }
        }
        Method {
            name: "requestInfo"
            type: "string"
            Parameter { name: "jid"; type: "string" }
        }
        Method {
            name: "requestItems"
            type: "string"
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "node"; type: "string" }
        }
        Method {
            name: "requestItems"
            type: "string"
            Parameter { name: "jid"; type: "string" }
        }
    }
    Component {
        name: "QmlQXmppGaming"
        prototype: "QObject"
        exports: ["QXmpp/QXmppGaming 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "string"; isReadonly: true }
        Property { name: "characterName"; type: "string"; isReadonly: true }
        Property { name: "characterProfile"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "level"; type: "string"; isReadonly: true }
        Property { name: "serverAddress"; type: "string"; isReadonly: true }
        Property { name: "serverName"; type: "string"; isReadonly: true }
        Property { name: "uri"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlQXmppLastActivity"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppLastActivity 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "string"; isReadonly: true }
        Property { name: "seconds"; type: "qulonglong"; isReadonly: true }
        Property { name: "status"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlQXmppLastActivityManager"
        prototype: "QXmppLastActivityManager"
        exports: ["QXmpp/QXmppLastActivityManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "lastActivityUpdated"
            Parameter { name: "lastActivity"; type: "QmlQXmppLastActivity"; isPointer: true }
        }
        Method {
            name: "requestLastActivity"
            type: "string"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method { name: "requestLastActivity"; type: "string" }
    }
    Component {
        name: "QmlQXmppLogger"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppLogger 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageTypes"
            values: {
                "NoMessage": 0,
                "DebugMessage": 1,
                "InformationMessage": 2,
                "WarningMessage": 4,
                "ReceivedMessage": 8,
                "SentMessage": 16,
                "AnyMessage": 31
            }
        }
        Property { name: "enabled"; type: "bool" }
        Signal {
            name: "message"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "message"; type: "string" }
        }
    }
    Component {
        name: "QmlQXmppMessage"
        prototype: "QObject"
        exports: ["QXmpp/QXmppMessage 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Error": 0,
                "Normal": 1,
                "Chat": 2,
                "GroupChat": 3,
                "Headline": 4
            }
        }
        Enum {
            name: "State"
            values: {
                "None": 0,
                "Active": 1,
                "Inactive": 2,
                "Gone": 3,
                "Composing": 4,
                "Paused": 5
            }
        }
        Property { name: "body"; type: "string"; isReadonly: true }
        Property { name: "isAttentionRequested"; type: "bool"; isReadonly: true }
        Property { name: "isReceiptRequested"; type: "bool"; isReadonly: true }
        Property { name: "mucInvitationJid"; type: "string"; isReadonly: true }
        Property { name: "mucInvitationPassword"; type: "string"; isReadonly: true }
        Property { name: "mucInvitationReason"; type: "string"; isReadonly: true }
        Property { name: "receiptId"; type: "string"; isReadonly: true }
        Property { name: "stamp"; type: "QDateTime"; isReadonly: true }
        Property { name: "subject"; type: "string"; isReadonly: true }
        Property { name: "thread"; type: "string"; isReadonly: true }
        Property { name: "xhtml"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "QmlQXmppMessage::State"; isReadonly: true }
        Property { name: "type"; type: "QmlQXmppMessage::Type"; isReadonly: true }
        Property { name: "to"; type: "string"; isReadonly: true }
        Property { name: "from"; type: "string"; isReadonly: true }
        Property { name: "id"; type: "string"; isReadonly: true }
        Property { name: "lang"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlQXmppMucManager"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppMucManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "invitationReceived"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "inviter"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Signal {
            name: "roomAdded"
            Parameter { name: "roomJid"; type: "string" }
        }
        Signal {
            name: "roomCreated"
            Parameter { name: "roomJid"; type: "string" }
        }
        Signal {
            name: "joined"
            Parameter { name: "roomJid"; type: "string" }
        }
        Signal {
            name: "kicked"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Signal {
            name: "left"
            Parameter { name: "roomJid"; type: "string" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "nickNameChanged"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "nickName"; type: "string" }
        }
        Signal {
            name: "configurationReceived"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "configuration"; type: "QVariantMap" }
        }
        Signal {
            name: "permissionsReceived"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "permissions"; type: "QVariantList" }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "message"; type: "QmlQXmppMessage"; isPointer: true }
        }
        Signal {
            name: "participantAdded"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
        }
        Signal {
            name: "participantChanged"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
        }
        Signal {
            name: "participantRemoved"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
        }
        Signal {
            name: "participantPermissions"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "permissions"; type: "QVariantMap" }
        }
        Method { name: "getRooms"; type: "QStringList" }
        Method {
            name: "addRoom"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "requestConfiguration"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "requestPermissions"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "destroyRoom"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "destroyRoom"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "join"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "nickname"; type: "string" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "leave"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "leave"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "ban"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "occupantJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "kick"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "occupantJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "participants"
            type: "QStringList"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "participantsFullJid"
            type: "QStringList"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "participantFullJid"
            type: "string"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "occupantJid"; type: "string" }
        }
        Method {
            name: "sendInvitation"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "sendInvitationMediated"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "subject"
            type: "string"
            Parameter { name: "roomJid"; type: "string" }
        }
        Method {
            name: "setSubject"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "subject"; type: "string" }
        }
        Method {
            name: "setConfiguration"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "form"; type: "QVariantMap" }
        }
        Method {
            name: "setPermission"
            type: "bool"
            Parameter { name: "roomJid"; type: "string" }
            Parameter { name: "jid"; type: "string" }
            Parameter { name: "affliation"; type: "string" }
        }
    }
    Component {
        name: "QmlQXmppPEPManager"
        prototype: "QObject"
        exports: ["QXmpp/QmlQXmppPEPManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "gamingReceived"
            Parameter { name: "game"; type: "QmlQXmppGaming"; isPointer: true }
        }
        Method {
            name: "setGamingInfo"
            Parameter { name: "info"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QmlQXmppPresence"
        prototype: "QObject"
        exports: ["QXmpp/QXmppPresence 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string" }
        Property { name: "status"; type: "string" }
    }
    Component {
        name: "QmlQXmppRosterManager"
        prototype: "QObject"
        exports: ["QXmpp/QXmppRosterManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SubscriptionType"
            values: {
                "None": 0,
                "From": 1,
                "To": 2,
                "Both": 3
            }
        }
        Signal { name: "rosterReceived" }
        Signal {
            name: "presenceChanged"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "resource"; type: "string" }
        }
        Signal {
            name: "subscriptionReceived"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Signal {
            name: "itemAdded"
            Parameter { name: "bareJid"; type: "string" }
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "bareJid"; type: "string" }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "acceptSubscription"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "acceptSubscription"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "refuseSubscription"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "refuseSubscription"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "subscribe"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "subscribe"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "unsubscribe"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "reason"; type: "string" }
        }
        Method {
            name: "unsubscribe"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "addItem"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "groups"; type: "QStringList" }
        }
        Method {
            name: "addItem"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "addItem"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "removeItem"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "renameItem"
            type: "bool"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setNickname"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setGroups"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "groups"; type: "QStringList" }
        }
        Method { name: "getRosterBareJids"; type: "QStringList" }
        Method {
            name: "getPresence"
            type: "QmlQXmppPresence*"
            Parameter { name: "bareJid"; type: "string" }
            Parameter { name: "resource"; type: "string" }
        }
        Method {
            name: "getNickname"
            type: "string"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "getSubscription"
            type: "int"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method {
            name: "getGroups"
            type: "QStringList"
            Parameter { name: "bareJid"; type: "string" }
        }
    }
    Component {
        name: "QmlQXmppVCard"
        prototype: "QObject"
        exports: ["QXmpp/QXmppVCard 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "string" }
        Property { name: "birthday"; type: "QDate" }
        Property { name: "description"; type: "string" }
        Property { name: "email"; type: "string" }
        Property { name: "firstName"; type: "string" }
        Property { name: "fullName"; type: "string" }
        Property { name: "lastName"; type: "string" }
        Property { name: "middleName"; type: "string" }
        Property { name: "nickName"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "extra"; type: "QVariantMap" }
    }
    Component {
        name: "QmlQXmppVCardManager"
        prototype: "QXmppVCardManager"
        exports: ["QXmpp/QXmppVCardManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "vCardReceived"
            Parameter { name: "vcard"; type: "QmlQXmppVCard"; isPointer: true }
        }
        Signal { name: "clientVCardReceived" }
        Method {
            name: "requestVCard"
            type: "string"
            Parameter { name: "bareJid"; type: "string" }
        }
        Method { name: "requestVCard"; type: "string" }
        Method { name: "clientVCard" }
        Method {
            name: "setClientVCard"
            Parameter { type: "QmlQXmppVCard" }
        }
        Method { name: "requestClientVCard"; type: "string" }
        Method { name: "isClientVCardReceived"; type: "bool" }
    }
}
